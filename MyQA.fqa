{"apiVersion":"1.3","type":"com.fibaro.multilevelSwitch","initialProperties":{"quickAppVariables":[{"value":"hysch","name":"foo"}]},"file":[{"type":"lua","isMain":false,"content":"print(\"Hello from lib_example.lua\")","isOpen":false},{"name":"main","type":"lua","isMain":true,"content":"---@diagnostic disable: undefined-global, duplicate-set-field\nif not QuickApp then dofile(\"hc3emu.lua\") end\n--if not QuickApp then require(\"hc3emu\") end\n\n--fibaro.USER = \"admin\" -- set creds in TQ_cfg.lua instead\n--fibaro.PASSWORD = \"admin\"\n--fibaro.URL = \"http:\/\/192.168.1.57\/\"\n\n--%%name=\"Test\"\n--%%type=\"com.fibaro.multilevelSwitch\"\n--%% proxy=\"MyProxy\"\n--%%dark=true\n--%%id=5001\n--%%state=\"state.db\"\n--%%save=\"MyQA.fqa\"\n--%%var=foo:config.secret\n--%%debug=sdk:false,info:true,proxyAPI:true,server:true,onAction:true,onUIEvent:true\n--%%debug=http:true,color:true,blockAPI:true\n--%%file=lib_example.lua:lib\n\nlocal function printf(...) print(string.format(...)) end\n\nfunction QuickApp:onInit()\n  self:debug(self.name,self.id,self.type)\n  self:testBasic()\n  if fibaro.hc3emu.proxyId then \n    self:testChildren() -- Only works with proxy\n  end\n  self:testMQTT()\n  print(\"Done!\")\nend\n\nfunction QuickApp:testBasic()\n  local info = api.get(\"\/settings\/info\")\n  printf(\"SW version:%s\",info.currentVersion.version)\n  printf(\"Serial nr:%s\",info.serialNumber)\n  printf(\"Sunrise: %s, Sunset: %s\",fibaro.getValue(1,\"sunriseHour\"),fibaro.getValue(1,\"sunsetHour\"))\n  \n  local qas = api.get(\"\/devices?interface=quickApp\")\n  printf(\"QuickApps:%s\",#qas)\n  local qvs = api.get(\"\/globalVariables\")\n  printf(\"GlobalVariables:%s\",#qvs)\n  \n  self:debug(\"Start\")\n  local delay = 0.2\n  setTimeout(function() \n    self:debug(\"End\",delay,\"sec later\") \n  end,delay*1000)\n  \n  self:debug(\"This is a debug statement\")\n  self:trace(\"This is a trace statement\")\n  self:warning(\"This is a warning statement\")\n  self:error(\"This is an error statement\")\n  \n  self:setVariable(\"Foo\",42)\n  if self:getVariable(\"Foo\") == 42 then self:debug(\"setVar is OK\")\n  else self:error(\"setVar FAIL\") end\n  \n  self:updateProperty(\"value\",66)\n  if fibaro.getValue(self.id,\"value\") == 66 then self:debug(\"updateProperty is OK\")\n  else self:error(\"updateProperty FAIL\") end\n  \n  --  self:setName(\"MyNewName\") -- This should restart the QA...\n  --  if api.get(\"\/devices\/\"..self.id).name == \"MyNewName\" then self:debug(\"setName OK\") \n  --  else self:debug(\"setName FAIL\") end\n  \n  self:internalStorageSet(\"key\",42)\n  if self:internalStorageGet(\"key\") == 42 then self:debug(\"internalStorage Set\/Get OK\") \n  else self:error(\"internalStorage Set\/Get FAIL\") end\n  \n  self:internalStorageRemove(\"key\")\n  if self:internalStorageGet(\"key\") == nil then self:debug(\"internalStorageRemove OK\") \n  else self:error(\"internalStorageRemove FAIL\") end\n  \n  --self:addInterfaces({'battery'}) -- Restarts the QA on the HC3...\n  local a,b = api.get(\"\/settings\/network\")\n  \n  local data = {\n    type =  \"centralSceneEvent\",\n    source = plugin.mainDeviceId,\n    data = { keyAttribute = 'Pressed', keyId = 1 }\n  }\n  local a,b = api.post(\"\/plugins\/publishEvent\", data)\n  if b==200 then self:debug(\"publishEvent OK\") \n  else self:error(\"publishEvent FAIL\",a,b) end\n  \n  setTimeout(function() error(\"This is an intentional error in a setTimeout function\") end,0)\nend\n\nclass 'MyChild'(QuickAppChild)\nfunction MyChild:__init(dev) QuickAppChild.__init(self,dev) end\n\nfunction QuickApp:testChildren()\n  self:initChildDevices({[\"com.fibaro.binarySwitch\"]=MyChild})\n  local children = api.get(\"\/devices?parentId=\"..self.id)\n  if #children == 0 then \n    self:createChildDevice({\n      name = \"myChild\",\n      type = \"com.fibaro.binarySwitch\",\n    }, \n    MyChild)\n  end\n  \n  for _,c in pairs(self.childDevices) do \n    printf(\"Have child %s %s\",c.id,c.name)\n  end\n  \n  for id,_ in pairs(self.childDevices) do \n    printf(\"Deleting child %s\",id)\n    self:removeChildDevice(id)\n  end\nend\n\nfunction QuickApp:testMQTT()\n  --local url = \"mqtt:\/\/mqtt.flespi.io\"\n  local url = \"mqtt:\/\/test.mosquitto.org\"\n  local ref = nil\n  local function handleConnect(event)\n    self:debug(\"connected: \"..json.encode(event))\n    self.client:subscribe(\"test\/#\",{qos=1})\n    self.client:publish(\"test\/blah\", \"Hello from \"..self.name,{qos=1})\n    ref = setTimeout(function() \n      self:debug(\"No message within 5s, disconnecting\")\n      self.client:disconnect() \n    end,5000)\n  end\n  self.client = mqtt.Client.connect(url, {\n    port=\"1883\", clientId=\"HC3\",\n    --username = \"stPwSVV73Eqw5LSv0iMXbc4EguS7JyuZR9lxU5uLxI5tiNM8ToTVqNpu85pFtJv9\",\n  })\n  self.client._debug = true\n  self.client:addEventListener('published', function(event) self:debug(\"published: \"..json.encode(event)) end)  \n  self.client:addEventListener('message', function(event)\n    if event.topic == \"test\/blah\" then \n      self:debug(\"Got message: \"..event.payload)\n      clearTimeout(ref)\n      self.client:disconnect()\n    end\n  end)\n  self.client:addEventListener('connected', handleConnect)\n  self.client:addEventListener('connected', handleConnect)\nend\n\nfunction QuickApp:turnOn() print(\"Turn on called\") end\nfunction QuickApp:turnOff() print(\"Turn off called\") end\nfunction QuickApp:setValue(v) print(\"setValue called\",v) end\nfunction QuickApp:mySlider(v) print(\"mySlider called\",v.values[1]) end\nfunction QuickApp:myButton() print(\"MyButton called\") end","isOpen":false}],"name":"Test","initialInterfaces":["quickApp"]}